apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusters.cluster.x-k8s.io
  labels:
    cluster.x-k8s.io/provider: cluster-api
  annotations:
    cert-manager.io/inject-ca-from: capi-webhook-system/capi-serving-cert
    controller-gen.kubebuilder.io/version: v0.2.9
  creationTimestamp: "null"
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: capi-webhook-service
          namespace: capi-webhook-system
          path: /convert
        caBundle: Cg==
      conversionReviewVersions:
        - v1
        - v1beta1
  group: cluster.x-k8s.io
  names:
    kind: Cluster
    categories:
      - cluster-api
    listKind: ClusterList
    plural: clusters
    shortNames:
      - cl
    singular: cluster
  scope: Namespaced
  versions:
    - name: v1alpha2
      additionalPrinterColumns:
        - name: Phase
          type: string
          description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
          jsonPath: .status.phase
      schema:
        openAPIV3Schema:
          type: object
          description: Cluster is the Schema for the clusters API
          properties:
            apiVersion:
              type: string
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            kind:
              type: string
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            metadata:
              type: object
            spec:
              type: object
              description: ClusterSpec defines the desired state of Cluster
              properties:
                clusterNetwork:
                  type: object
                  description: Cluster network configuration
                  properties:
                    apiServerPort:
                      type: integer
                      description: APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
                      format: int32
                    pods:
                      type: object
                      description: The network ranges from which Pod networks are allocated.
                      properties:
                        cidrBlocks:
                          type: array
                          items:
                            type: string
                      required:
                        - cidrBlocks
                    serviceDomain:
                      type: string
                      description: Domain name for services.
                    services:
                      type: object
                      description: The network ranges from which service VIPs are allocated.
                      properties:
                        cidrBlocks:
                          type: array
                          items:
                            type: string
                      required:
                        - cidrBlocks
                infrastructureRef:
                  type: object
                  description: InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
                  properties:
                    name:
                      type: string
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    namespace:
                      type: string
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    apiVersion:
                      type: string
                      description: API version of the referent.
                    kind:
                      type: string
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    fieldPath:
                      type: string
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                    resourceVersion:
                      type: string
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    uid:
                      type: string
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
            status:
              type: object
              description: ClusterStatus defines the observed state of Cluster
              properties:
                apiEndpoints:
                  type: array
                  description: APIEndpoints represents the endpoints to communicate with the control plane.
                  items:
                    type: object
                    description: APIEndpoint represents a reachable Kubernetes API endpoint.
                    properties:
                      port:
                        type: integer
                        description: The port on which the API server is serving.
                      host:
                        type: string
                        description: The hostname on which the API server is serving.
                    required:
                      - host
                      - port
                controlPlaneInitialized:
                  type: boolean
                  description: ControlPlaneInitialized defines if the control plane has been initialized.
                errorMessage:
                  type: string
                  description: ErrorMessage indicates that there is a problem reconciling the state, and will be set to a descriptive error message.
                errorReason:
                  type: string
                  description: ErrorReason indicates that there is a problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
                infrastructureReady:
                  type: boolean
                  description: InfrastructureReady is the state of the infrastructure provider.
                phase:
                  type: string
                  description: Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
      served: true
      storage: false
      subresources:
        status: {}
    - name: v1alpha3
      additionalPrinterColumns:
        - name: Phase
          type: string
          description: Cluster status such as Pending/Provisioning/Provisioned/Deleting/Failed
          jsonPath: .status.phase
      schema:
        openAPIV3Schema:
          type: object
          description: Cluster is the Schema for the clusters API
          properties:
            apiVersion:
              type: string
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            kind:
              type: string
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            metadata:
              type: object
            spec:
              type: object
              description: ClusterSpec defines the desired state of Cluster
              properties:
                paused:
                  type: boolean
                  description: Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
                clusterNetwork:
                  type: object
                  description: Cluster network configuration.
                  properties:
                    apiServerPort:
                      type: integer
                      description: APIServerPort specifies the port the API Server should bind to. Defaults to 6443.
                      format: int32
                    pods:
                      type: object
                      description: The network ranges from which Pod networks are allocated.
                      properties:
                        cidrBlocks:
                          type: array
                          items:
                            type: string
                      required:
                        - cidrBlocks
                    serviceDomain:
                      type: string
                      description: Domain name for services.
                    services:
                      type: object
                      description: The network ranges from which service VIPs are allocated.
                      properties:
                        cidrBlocks:
                          type: array
                          items:
                            type: string
                      required:
                        - cidrBlocks
                controlPlaneEndpoint:
                  type: object
                  description: ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
                  properties:
                    port:
                      type: integer
                      description: The port on which the API server is serving.
                      format: int32
                    host:
                      type: string
                      description: The hostname on which the API server is serving.
                  required:
                    - host
                    - port
                controlPlaneRef:
                  type: object
                  description: ControlPlaneRef is an optional reference to a provider-specific resource that holds the details for provisioning the Control Plane for a Cluster.
                  properties:
                    name:
                      type: string
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    namespace:
                      type: string
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    apiVersion:
                      type: string
                      description: API version of the referent.
                    kind:
                      type: string
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    fieldPath:
                      type: string
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                    resourceVersion:
                      type: string
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    uid:
                      type: string
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                infrastructureRef:
                  type: object
                  description: InfrastructureRef is a reference to a provider-specific resource that holds the details for provisioning infrastructure for a cluster in said provider.
                  properties:
                    name:
                      type: string
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    namespace:
                      type: string
                      description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    apiVersion:
                      type: string
                      description: API version of the referent.
                    kind:
                      type: string
                      description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    fieldPath:
                      type: string
                      description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                    resourceVersion:
                      type: string
                      description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    uid:
                      type: string
                      description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
            status:
              type: object
              description: ClusterStatus defines the observed state of Cluster
              properties:
                conditions:
                  type: array
                  description: Conditions defines current service state of the cluster.
                  items:
                    type: object
                    description: Condition defines an observation of a Cluster API resource operational state.
                    properties:
                      type:
                        type: string
                        description: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
                      status:
                        type: string
                        description: Status of the condition, one of True, False, Unknown.
                      lastTransitionTime:
                        type: string
                        description: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
                        format: date-time
                      message:
                        type: string
                        description: A human readable message indicating details about the transition. This field may be empty.
                      reason:
                        type: string
                        description: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
                      severity:
                        type: string
                        description: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
                    required:
                      - status
                      - type
                controlPlaneInitialized:
                  type: boolean
                  description: ControlPlaneInitialized defines if the control plane has been initialized.
                controlPlaneReady:
                  type: boolean
                  description: ControlPlaneReady defines if the control plane is ready.
                failureDomains:
                  type: object
                  additionalProperties:
                    type: object
                    description: FailureDomainSpec is the Schema for Cluster API failure domains. It allows controllers to understand how many failure domains a cluster can optionally span across.
                    properties:
                      attributes:
                        type: object
                        additionalProperties:
                          type: string
                        description: Attributes is a free form map of attributes an infrastructure provider might use or require.
                      controlPlane:
                        type: boolean
                        description: ControlPlane determines if this failure domain is suitable for use by control plane machines.
                  description: FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
                failureMessage:
                  type: string
                  description: FailureMessage indicates that there is a fatal problem reconciling the state, and will be set to a descriptive error message.
                failureReason:
                  type: string
                  description: FailureReason indicates that there is a fatal problem reconciling the state, and will be set to a token value suitable for programmatic interpretation.
                infrastructureReady:
                  type: boolean
                  description: InfrastructureReady is the state of the infrastructure provider.
                observedGeneration:
                  type: integer
                  description: ObservedGeneration is the latest generation observed by the controller.
                  format: int64
                phase:
                  type: string
                  description: Phase represents the current phase of cluster actuation. E.g. Pending, Running, Terminating, Failed etc.
      served: true
      storage: true
      subresources:
        status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
